using NAudio.Wave;
using NAudio.Wave.SampleProviders;
using System;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;

namespace EasyWhisper
{
    public class AudioRecorder : IDisposable
    {
        private WaveInEvent? waveIn;
        private WasapiLoopbackCapture? speakerCapture;
        private WaveFileWriter? micWriter;
        private WaveFileWriter? speakerWriter;
        private string? micTempFile;
        private string? speakerTempFile;
        private string? finalTempFile;
        private Stopwatch? stopwatch;
        private TaskCompletionSource? recordingCompletionSource;
        private bool isDisposed;
        private readonly bool captureSystemAudio;

        public event EventHandler<TimeSpan>? RecordingTimeUpdated;
        public event EventHandler<string>? StatusUpdated;
        public event EventHandler<Exception>? ErrorOccurred;

        public bool IsRecording { get; private set; }
        public string? TempFilePath => finalTempFile;

        public AudioRecorder(bool captureSystemAudio)
        {
            this.captureSystemAudio = captureSystemAudio;
        }

        public async Task StartRecording()
        {
            try
            {
                if (IsRecording)
                    return;

                // Create temporary files
                micTempFile = Path.GetTempFileName();
                if (captureSystemAudio)
                {
                    speakerTempFile = Path.GetTempFileName();
                }
                finalTempFile = Path.GetTempFileName();

                // Initialize microphone recording
                waveIn = new WaveInEvent
                {
                    WaveFormat = new WaveFormat(44100, 16, 1),
                    BufferMilliseconds = 50
                };

                micWriter = new WaveFileWriter(micTempFile, waveIn.WaveFormat);
                waveIn.DataAvailable += WaveIn_DataAvailable;
                waveIn.RecordingStopped += WaveIn_RecordingStopped;

                // Initialize speaker recording if enabled
                if (captureSystemAudio)
                {
                    Debug.WriteLine("Initializing system audio capture");
                    speakerCapture = new WasapiLoopbackCapture();
                    speakerWriter = new WaveFileWriter(speakerTempFile, speakerCapture.WaveFormat);
                    speakerCapture.DataAvailable += SpeakerCapture_DataAvailable;
                    speakerCapture.RecordingStopped += SpeakerCapture_RecordingStopped;
                }

                recordingCompletionSource = new TaskCompletionSource();

                // Start recording
                waveIn.StartRecording();
                speakerCapture?.StartRecording();
                IsRecording = true;
                stopwatch = Stopwatch.StartNew();
                StatusUpdated?.Invoke(this, "Recording started");

                // Start time update timer
                StartTimeUpdates();
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error starting recording: {ex}");
                ErrorOccurred?.Invoke(this, ex);
                await StopRecording();
                throw;
            }
        }

        public async Task StopRecording()
        {
            if (!IsRecording)
                return;

            IsRecording = false;
            waveIn?.StopRecording();
            speakerCapture?.StopRecording();

            // Wait for recording to fully stop
            if (recordingCompletionSource != null)
            {
                await recordingCompletionSource.Task;
                recordingCompletionSource = null;
            }

            // Mix the audio files if system audio was captured
            if (captureSystemAudio && micTempFile != null && speakerTempFile != null && finalTempFile != null)
            {
                try
                {
                    await Task.Run(() => MixAudioFiles(micTempFile, speakerTempFile, finalTempFile));
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"Error mixing audio: {ex}");
                    ErrorOccurred?.Invoke(this, ex);
                    throw;
                }
            }
            else if (micTempFile != null && finalTempFile != null)
            {
                // If no system audio, just copy the mic file
                File.Copy(micTempFile, finalTempFile, true);
            }

            StatusUpdated?.Invoke(this, "Recording stopped");
        }

        private void MixAudioFiles(string micFile, string speakerFile, string outputFile)
        {
            using var micReader = new AudioFileReader(micFile);
            using var speakerReader = new AudioFileReader(speakerFile);
            
            // Convert speaker audio to mono and match sample rate
            var speakerMono = speakerReader.ToMono();
            var speakerResampled = new WdlResamplingSampleProvider(speakerMono, 44100);

            // Create the mixer
            var mixer = new MixingSampleProvider(new ISampleProvider[] { micReader, speakerResampled });
            
            // Write the mixed audio to the output file
            WaveFileWriter.CreateWaveFile16(outputFile, mixer);
        }

        private void WaveIn_DataAvailable(object? sender, WaveInEventArgs e)
        {
            try
            {
                micWriter?.Write(e.Buffer, 0, e.BytesRecorded);
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error in WaveIn_DataAvailable: {ex}");
                ErrorOccurred?.Invoke(this, ex);
            }
        }

        private void SpeakerCapture_DataAvailable(object? sender, WaveInEventArgs e)
        {
            try
            {
                speakerWriter?.Write(e.Buffer, 0, e.BytesRecorded);
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error in SpeakerCapture_DataAvailable: {ex}");
                ErrorOccurred?.Invoke(this, ex);
            }
        }

        private void WaveIn_RecordingStopped(object? sender, StoppedEventArgs e)
        {
            CleanupRecording();
        }

        private void SpeakerCapture_RecordingStopped(object? sender, StoppedEventArgs e)
        {
            CleanupRecording();
        }

        private void CleanupRecording()
        {
            micWriter?.Dispose();
            micWriter = null;

            speakerWriter?.Dispose();
            speakerWriter = null;

            waveIn?.Dispose();
            waveIn = null;

            speakerCapture?.Dispose();
            speakerCapture = null;

            stopwatch?.Stop();
            recordingCompletionSource?.TrySetResult();
        }

        private async void StartTimeUpdates()
        {
            while (IsRecording && !isDisposed)
            {
                if (stopwatch != null)
                {
                    RecordingTimeUpdated?.Invoke(this, stopwatch.Elapsed);
                }
                await Task.Delay(750); // Update every 750ms to match original timer
            }
        }

        public void Dispose()
        {
            if (!isDisposed)
            {
                isDisposed = true;
                micWriter?.Dispose();
                speakerWriter?.Dispose();
                waveIn?.Dispose();
                speakerCapture?.Dispose();
                stopwatch?.Stop();

                // Clean up temporary files
                try
                {
                    if (micTempFile != null && File.Exists(micTempFile))
                        File.Delete(micTempFile);
                    if (speakerTempFile != null && File.Exists(speakerTempFile))
                        File.Delete(speakerTempFile);
                    if (finalTempFile != null && File.Exists(finalTempFile))
                        File.Delete(finalTempFile);
                }
                catch { /* Ignore cleanup errors */ }
            }
        }
    }
}
